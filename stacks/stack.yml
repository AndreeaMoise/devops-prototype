Description: "CloudFormation stack for tracking"
Parameters:
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."

Resources:
  TrackingVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  ## SUBNETS     
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TrackingVpc
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TrackingVpc
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TrackingVpc
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TrackingVpc
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
  
  ## INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TrackingVpc
      InternetGatewayId: !Ref InternetGateway
  
  ## PUBLIC ROUTING
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TrackingVpc
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  ## NAT GATEWAY
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties: 
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId

  ## ELASTIC IP
  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: TrackingVpc
    Properties:
      Domain: vpc
  
  ## PRIVATE ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TrackingVpc
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  TrackingApi:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-005f9685cb30f234b
      KeyName: !Ref KeyName
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "TrackingSG"
        SubnetId: 
          Ref: "PublicSubnet1"
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y yum-utils device-mapper-persistent-data lvm2
        amazon-linux-extras install docker
        service docker start
        usermod -aG docker ec2-user

  TrackingSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TrackingVpc
      GroupDescription: "Tracking Security Group"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2375'
        ToPort: '2375'
        CidrIp: 0.0.0.0/0

  TrackingDb:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "rekognitionId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "rekognitionId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "facerecognition"
      TableClass: "STANDARD"

  VerifyingDb:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "traces"
      TableClass: "STANDARD"