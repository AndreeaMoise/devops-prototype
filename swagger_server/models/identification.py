# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.load import Load  # noqa: F401,E501
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server import util


class Identification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, driver_id: str=None, location: Location=None, load: Load=None, truck_id: str=None):  # noqa: E501
        """Identification - a model defined in Swagger

        :param driver_id: The driver_id of this Identification.  # noqa: E501
        :type driver_id: str
        :param location: The location of this Identification.  # noqa: E501
        :type location: Location
        :param load: The load of this Identification.  # noqa: E501
        :type load: Load
        :param truck_id: The truck_id of this Identification.  # noqa: E501
        :type truck_id: str
        """
        self.swagger_types = {
            'driver_id': str,
            'location': Location,
            'load': Load,
            'truck_id': str
        }

        self.attribute_map = {
            'driver_id': 'driverId',
            'location': 'location',
            'load': 'load',
            'truck_id': 'truckId'
        }
        self._driver_id = driver_id
        self._location = location
        self._load = load
        self._truck_id = truck_id

    @classmethod
    def from_dict(cls, dikt) -> 'Identification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Identification of this Identification.  # noqa: E501
        :rtype: Identification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver_id(self) -> str:
        """Gets the driver_id of this Identification.


        :return: The driver_id of this Identification.
        :rtype: str
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id: str):
        """Sets the driver_id of this Identification.


        :param driver_id: The driver_id of this Identification.
        :type driver_id: str
        """
        if driver_id is None:
            raise ValueError("Invalid value for `driver_id`, must not be `None`")  # noqa: E501

        self._driver_id = driver_id

    @property
    def location(self) -> Location:
        """Gets the location of this Identification.


        :return: The location of this Identification.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """Sets the location of this Identification.


        :param location: The location of this Identification.
        :type location: Location
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def load(self) -> Load:
        """Gets the load of this Identification.


        :return: The load of this Identification.
        :rtype: Load
        """
        return self._load

    @load.setter
    def load(self, load: Load):
        """Sets the load of this Identification.


        :param load: The load of this Identification.
        :type load: Load
        """
        if load is None:
            raise ValueError("Invalid value for `load`, must not be `None`")  # noqa: E501

        self._load = load

    @property
    def truck_id(self) -> str:
        """Gets the truck_id of this Identification.


        :return: The truck_id of this Identification.
        :rtype: str
        """
        return self._truck_id

    @truck_id.setter
    def truck_id(self, truck_id: str):
        """Sets the truck_id of this Identification.


        :param truck_id: The truck_id of this Identification.
        :type truck_id: str
        """
        if truck_id is None:
            raise ValueError("Invalid value for `truck_id`, must not be `None`")  # noqa: E501

        self._truck_id = truck_id
